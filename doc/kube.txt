* kube.txt*	For use with Neovim

INTRODUCTION					*kube*

kube.nvim is a Neovim plugin that provides an interface for managing Kubernetes resources directly from your editor. It allows you to view logs, forward ports, and manage resources without leaving Neovim.

COMMANDS					*kube-commands*

The following commands are available in kube.nvim:

`:KubeGet <resource>`: Get a list of resources of the specified type.
`:KubeDelete <resource> <name>`: Delete the specified resource.
`:KubeContext <context>`: Switch to the specified Kubernetes context.

KEY MAPPINGS					*kube-key-mappings*

The following key mappings are available in kube.nvim:

`<cr>`: Drill down into the resource under the cursor.
`gl`: Show logs for the resource under the cursor.
`gL`: Follow logs for the resource under the cursor.
`gF`: Show port forwards for the resource under the cursor.
`gf`: Forward ports for the resource under the cursor.
`gy`: Show YAML for the resource under the cursor.
`gd`: Describe the resource under the cursor.
`ge`: Edit the resource under the cursor.
`gi`: Set image for the resource under the cursor.
`gr`: Refresh the resources in the buffer.

CONFIGURATION					*kube-configuration*

The following configuration options are available in kube.nvim:

- `keymaps`: A table of key mappings. The default values are:
  - `drill_down`: `<cr>`
  - `describe`: `gd`
  - `refresh`: `gr`
  - `show_logs`: `gl`
  - `follow_logs`: `gL`
  - `port_forward`: `gF`
  - `forward_port`: `gf`
  - `show_yaml`: `gy`
  - `edit`: `ge`
  - `set_image`: `gi`
- `highlights`: A table of highlight groups. The default values are:
  - `KubeBody`: `{ fg = "#40a02b" }`
  - `KubePending`: `{ fg = "#fe640b" }`
  - `KubeRunning`: `{ fg = "#40a02b" }`
  - `KubeFailed`: `{ fg = "#d20f39" }`
  - `KubeSucceeded`: `{ fg = "#9ca0b0" }`
  - `KubeUnknown`: `{ fg = "#6c6f85" }`
  - `KubeHeader`: `{ fg = "#df8e1d", bold = true }`
